<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIABwAAAAAAHgBWCDYAmxA3AJ4RIABbCQAAAAEEAAsAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        ALiicQCjNSUALo1jAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEAAAAAAxAO
        DkYbGRmLGxkZjBAODkgAAAAEAgEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtIAAAGhIAFHVS
        AHWndQCiiWAAizgnACuabAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAUAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAABAAAABEAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////////////////5////8H///+B////AH///gA///wAH//8A
        A//8AAH/+AAB//AAAP/gAAA/wAAAH4AAAA/AAAAHwAAAA8AAAAPAAIABwACAAeABgAPgAcAH8APgD/gH
        8B/8D/g//z/8f/////////////////////8=
</value>
  </data>
</root>